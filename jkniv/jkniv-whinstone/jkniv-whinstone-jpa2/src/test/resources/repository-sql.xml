<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<statements context="whinstone" xmlns="http://jkniv.sf.net/schema/sqlegance/statements" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xsi:schemaLocation="http://jkniv.sf.net/schema/sqlegance/statements
       http://jkniv.sf.net/schema/sqlegance/sqlegance-stmt.xsd">

  <include href="/repository-sql-insert.xml" />
  <include href="/repository-sql-delete.xml" />
  <include href="/repository-sql-scalar.xml" />
  <include href="/repository-sql-native.xml" />
  <include href="/repository-sql-map.xml" />
  <include href="/repository-sql-groupingby.xml" />
  <include href="/repository-sql-onetomany.xml" />
  <include href="/repository-sql-constraints.xml" />
  <include href="/repository-sql-IN.xml" />

  <select id="Book#get" type="JPQL" returnType="com.acme.domain.orm.Book">
    from Book b
    <if test="id != null">
      where b.id = :id
    </if>
  </select>
  <update id="Book#update">
    update jpa_book set name = :name, isbn = :isbn, visualization = :visualization where id = :id
  </update>
  <update id="Book#update2">
    update jpa_book set name = ?, isbn = ?, visualization = ? where id = ?
  </update>

  <select id="Book.list" type="JPQL" returnType="com.acme.domain.orm.Book">
    from Book b
  </select>

  <select id="listLikeName" type="JPQL" returnType="com.acme.domain.orm.Book">
    select b from Book b where b.name like :name
  </select>

  <select id="listBean" type="JPQL" returnType="com.acme.domain.flat.AuthorFlat">
    select new com.acme.domain.flat.AuthorFlat(a.name, b.name) from Book b join
    b.author as a
  </select>

</statements>