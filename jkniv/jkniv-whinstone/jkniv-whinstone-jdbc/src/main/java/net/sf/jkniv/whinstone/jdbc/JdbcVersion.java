/* 
 * JKNIV, whinstone one contract to access your database.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.whinstone.jdbc;

import java.sql.Connection;

interface JdbcVersion
{
    /**
     * Indicate if supports update batching mode.
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsUpdateBatching();
    
    /**
     * Indicate if supports XA transactions.
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsXA();

    /**
     * Indicate if supports fetch size.
     * allow you to set the number of rows to prefetch into the client while a result set is being populated during a query. This feature reduces the number of round trips to the server.
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsFetchSize();
    
    /**
     * Indicate if supports savepoints.
     * Offer finer demarcation within transactions where can set a savepoint 
     * within a transaction and then roll back all work done after the savepoint.
     * 
     * <strong>Note:</strong>
     * Savepoints are supported for local transactions only. 
     * Specifying a savepoint within a global transaction causes a 
     * SQLException exception to be thrown.
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsSavePoints();

    /**
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean statementCaching();

    /**
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean resultSetCaching();

    /**
     *
     * Applications can share connections between local and global transactions
     * Applications can also switch connections between local transactions and 
     * global transactions. A connection is always in one of the following modes:
     * <br>
     * - NO_TXN
     * No transaction is actively using this connection.
     * <br>
     * - LOCAL_TXN
     * A local transaction with auto-commit turned off or disabled is actively 
     * using this connection.
     * <br>
     * - GLOBAL_TXN
     * A global transaction is actively using this connection.
     * Each connection switches automatically between these modes depending 
     * on the operations carried out
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsSwitchingBetweenTransactions();

    /**`
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsNamedParameters();

    /**
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsRowSets();

    /**
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsAutoGeneratedKeys();
    
    /**
     * 
     * enables applications to decide whether the ResultSet objects should be open or closed, when a commit operation is performed.
     * 
     * @return <code>true</code> if jdbc driver support, <code>false</code> otherwise.
     */
    boolean supportsResultSetHoldability();

    

    /**
     * 
     * A basic DataSource implementation produces standard 
     * Connection objects that are not pooled or used in a distributed transaction.
     * @param conn Opened connection to database
     * @return TODO javadoc
     * @see <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/sqldatasources.html">Connecting with DataSource Objects</a>
     */
    boolean isStandardConnection(Connection conn);
    
    /**
     * A DataSource implementation that supports connection pooling produces 
     * Connection objects that participate in connection pooling, that is, 
     * connections that can be recycled.
     * @param conn Opened connection to database
     * @return TODO javadoc
     * @see <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/sqldatasources.html">Connecting with DataSource Objects</a>
     */
    boolean isPoolingConnection(Connection conn);
    
    /**
     * A DataSource implementation that supports distributed transactions produces 
     * Connection objects that can be used in a distributed transaction, that is, 
     * a transaction that accesses two or more DBMS servers.
     * @param conn Opened connection to database
     * @return TODO javadoc
     * @see <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/sqldatasources.html">Connecting with DataSource Objects</a>
     */
    boolean isDistributedConnection(Connection conn);
    
}

