/* 
 * JKNIV, whinstone one contract to access your database.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.whinstone.jdbc.dialect;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import net.sf.jkniv.sqlegance.Insertable;
import net.sf.jkniv.sqlegance.RepositoryException;
import net.sf.jkniv.sqlegance.Sql;
import net.sf.jkniv.sqlegance.dialect.SqlFeatureFactory;
import net.sf.jkniv.sqlegance.dialect.SqlFeatureSupport;

/**
 * Default dialect do Oracle
 * 
 * <p>
 * Limit clause:
 *  <code>select name from author LIMIT 1 OFFSET 2</code>
 *  <code>
 *  select * from ( select row_.*, rownum rownum_ from 
     (select name from author ) 
     row_ where rownum &lt;= 5) where rownum_ &gt; 15
 *  </code>
 * </p>
 * 
 * <ul>
 *  <li>Supports limits? true</li>
 *  <li>Supports limit off set? true</li>
 *  <li>Supports rownum? true</li>
 * </ul>
 *
 * @author Alisson Gomes
 *
 */
public class Oracle12cDialect extends OracleDialect
{
    public Oracle12cDialect()
    {
        super();
        addFeature(SqlFeatureFactory.newInstance(SqlFeatureSupport.CONN_HOLDABILITY, false));
    }

    @Override
    public PreparedStatement prepare(Connection conn, Sql isql, String query)
    {
        PreparedStatement stmt = null;
        int rsType = isql.getResultSetType().getTypeScroll();
        int rsConcurrency = isql.getResultSetConcurrency().getConcurrencyMode();
        //int rsHoldability = isql.getResultSetHoldability().getHoldability();
        try
        {            
            if (isql.isInsertable())
            {
                Insertable insertTag = isql.asInsertable();
                if (insertTag.isAutoGenerateKey() && insertTag.getAutoGeneratedKey().isAutoStrategy())
                {
                    String[] columns = insertTag.getAutoGeneratedKey().getColumnsAsArray();
                    stmt = conn.prepareStatement(query, columns);
                }
            }
            if (stmt == null)
                stmt = conn.prepareStatement(query, rsType, rsConcurrency);
            if (isql.getTimeout() > 0)
                stmt.setQueryTimeout(isql.getTimeout());
        }
        catch (SQLException sqle)
        {
            throw new RepositoryException("Cannot prepare statement [" + sqle.getMessage() + "]", sqle);
        }
        return stmt;        
    }
}
