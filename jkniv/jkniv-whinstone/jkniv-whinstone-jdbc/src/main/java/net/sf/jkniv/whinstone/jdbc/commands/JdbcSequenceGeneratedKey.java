/* 
 * JKNIV, whinstone one contract to access your database.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.whinstone.jdbc.commands;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.jkniv.exception.HandleableException;
import net.sf.jkniv.sqlegance.Insertable;
import net.sf.jkniv.whinstone.Queryable;
import net.sf.jkniv.whinstone.statement.AutoKey;

/**
 * Call an database sequence and put the value into parameter object from {@link Queryable}
 * 
 * @author Alisson Gomes
 * @since 0.6.0
 */
public class JdbcSequenceGeneratedKey implements AutoKey<Object>
{
    private List<Object> keys;
    
    public JdbcSequenceGeneratedKey(Insertable isql, Connection conn, HandleableException handlerException)
    {
        this.keys = new ArrayList<Object>();
        try
        {
            String sql = isql.getAutoGeneratedKey().getText();
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet generatedKeys = stmt.executeQuery();
            while (generatedKeys.next())
            {
                Object id = generatedKeys.getObject(1);
                this.keys.add(id);
            }
        }
        catch (SQLException e)
        {
            handlerException.handle(e);
        }
    }
    
    @Override
    public Object getId()
    {
        if (isEmpty())
            return null;

        return (Long) this.keys.get(0);
    }
    
    @Override
    public String getUId()
    {
        if (isEmpty())
            return null;

        return String.valueOf(this.keys.get(0));
    }
    
    @Override
    public Iterator<Object> iterator()
    {
        return this.keys.iterator();
    }
    
    @Override
    public boolean hasItem()
    {
        return this.keys.size() > 0;
    }

    @Override
    public boolean isEmpty()
    {
        return this.keys.isEmpty();
    }

    @Override
    public int size()
    {
        return this.keys.size();
    }

}
