/* 
 * JKNIV, whinstone one contract to access your database.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.whinstone.jdbc.commands;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.jkniv.exception.HandleableException;
import net.sf.jkniv.whinstone.Queryable;
import net.sf.jkniv.whinstone.statement.AutoKey;

/**
 * Call an database sequence and put the value into parameter object from {@link Queryable}
 * 
 * @author Alisson Gomes
 * @since 0.6.0
 */
public class JdbcAutoGeneratedKey implements AutoKey<Long>
{
    private List<Long> keys;
    
    public JdbcAutoGeneratedKey(PreparedStatement stmt, HandleableException handlerException)
    {
        this.keys = new ArrayList<Long>();
        try
        {
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            while (generatedKeys.next())
            {
                Long id = generatedKeys.getLong(1);
                this.keys.add(id);
            }
        }
        catch (SQLException e)
        {
            handlerException.handle(e);
        }
        if (keys.isEmpty())
            keys.add(null);
    }
    
    @Override
    public Long getId()
    {
        return (Long) this.keys.get(0);
    }
    
    @Override
    public String getUId()
    {
        return String.valueOf(this.keys.get(0));
    }
    
    @Override
    public Iterator<Long> iterator()
    {
        return this.keys.iterator();
    }
    /*
    public void bind(PreparedStatement stmt)
    {
        String[] properties = isql.getAutoGeneratedKey().getPropertiesAsArray();
        try
        {
            if (!this.queryable.isTypeOfArray() && !this.queryable.isTypeOfCollection())// FIXME test generate key params input as collection or array
            {
                ObjectProxy<?> proxy = ObjectProxyFactory.newProxy(queryable.getParams());
                ResultSet generatedKeys = stmt.getGeneratedKeys();
                
                if (generatedKeys.next())
                {
                    for (int i = 0; i < properties.length; i++)
                        setValue(proxy, properties[i], generatedKeys.getObject(i + 1));
                }
                while (generatedKeys.next())
                {
                    for (int i = 0; i < properties.length; i++)
                        setValue(proxy, properties[i], generatedKeys.getObject(i + 1));
                }
            }
            else if (this.queryable.isTypeOfMap())// FIXME test generate key params input as Map
            {
                Map<String, Object> instance = (Map) queryable.getParams();
                ResultSet generatedKeys = stmt.getGeneratedKeys();
                if (generatedKeys.next())
                {
                    for (int i = 0; i < properties.length; i++)
                        instance.put(properties[i], generatedKeys.getObject(i + 1));
                }
                while (generatedKeys.next())
                {
                    for (int i = 0; i < properties.length; i++)
                        instance.put(properties[i], generatedKeys.getObject(i + 1));
                }
            }
            else
                handlerException.throwMessage(
                        "Cannot set auto generated key for collections or array instance of parameters at query [%s]",
                        queryable.getName());
        }
        catch (SQLException sqle)
        {
            handlerException.handle(sqle);
        }
    }
    
    private void setValue(ObjectProxy<?> proxy, String property, Object value)
    {
        Object parsedValue = value;
        
        if (value instanceof java.sql.Time)
            parsedValue = new Date(((java.sql.Time) value).getTime());
        else if (value instanceof java.sql.Date)
            parsedValue = new Date(((java.sql.Date) value).getTime());
        else if (value instanceof java.sql.Timestamp)
            parsedValue = new Date(((java.sql.Timestamp) value).getTime());
        
        proxy.invoke(SETTER.capitalize(property), parsedValue);
    }
    */
}
