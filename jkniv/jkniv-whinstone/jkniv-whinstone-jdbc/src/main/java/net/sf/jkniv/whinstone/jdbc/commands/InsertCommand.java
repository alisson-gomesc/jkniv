/* 
 * JKNIV, whinstone one contract to access your database.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.whinstone.jdbc.commands;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import net.sf.jkniv.sqlegance.KeyGeneratorType;
import net.sf.jkniv.whinstone.ConnectionAdapter;
import net.sf.jkniv.whinstone.statement.StatementAdapter;

/**
 * 
 * @author Alisson Gomes
 * @since 0.6.0
 */
class InsertCommand //extends AbstractCommand
{
    private final StatementAdapter<?, ?> adapterStmt;
    private final ConnectionAdapter adapterConn;
    
    public InsertCommand(StatementAdapter<?, ?> adapterStmt, ConnectionAdapter adapterConn)
    {
        this.adapterStmt = adapterStmt;
        this.adapterConn = adapterConn;
    }
    
    public <T> T execute()
    {
        Integer affected = 0;
        PreparedStatement stmt = null;
        try
        {
            KeyGeneratorType keyGeneratorType = adapterStmt.getKeyGeneratorType();
            if (keyGeneratorType  != null)
            {
                if (keyGeneratorType == KeyGeneratorType.AUTO)
                {
                    /*
                    // first execute insert after get keys
                    stmt = prepareStatement();
                    StatementAdapterOld stmtAdapter = new PreparedStatementAdapterOld(stmt, stmtStrategy.getSqlLogger());
                    AutoBindParams prepareParams = PrepareParamsFactory.newPrepareParams(stmtAdapter,
                            isql.getParamParser(), sqlDialect.getQueryable());
                    prepareParams.parameterized(sqlDialect.getParamsNames());
                    
                    */
                    
                    // WORKS
                    //StatementAdapter<Number, ResultSet> adapterStmt = adapterConn.newStatement(sqlDialect);
                    //affected = adapterStmt.execute();

                    affected = adapterStmt.execute();
                    //new SettingAutoGeneratedKey(sqlDialect.getQueryable(), isql, handlerException).set(stmt);
                }
                else if (keyGeneratorType == KeyGeneratorType.SEQUENCE)
                {
                    // first get sequence after execute insert
                    /*
                    new SettingSequenceGeneratedKey(sqlDialect.getQueryable(), isql, conn, handlerException).set();
                    stmt = prepareStatement();
                    StatementAdapterOld stmtAdapter = new PreparedStatementAdapterOld(stmt, stmtStrategy.getSqlLogger());
                    AutoBindParams prepareParams = PrepareParamsFactory.newPrepareParams(stmtAdapter,
                            isql.getParamParser(), sqlDialect.getQueryable());
                    prepareParams.parameterized(sqlDialect.getParamsNames());
                    affected = stmt.executeUpdate();
                    */
                }
            }
            else
            {
                /*
                stmt = prepareStatement();
                StatementAdapterOld stmtAdapter = new PreparedStatementAdapterOld(stmt, stmtStrategy.getSqlLogger());
                AutoBindParams prepareParams = PrepareParamsFactory.newPrepareParams(stmtAdapter, isql.getParamParser(),
                        sqlDialect.getQueryable());
                prepareParams.parameterized(sqlDialect.getParamsNames());
                affected = stmt.executeUpdate();
                */
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            //handlerException.handle(e);
        }
        finally
        {
            if (stmt != null)// TODO test me (create test with FOR EACH to insert many rows, Cannot insert record. ORA-01000: maximo de cursores abertos excedido
            {
                try
                {
                    stmt.close();
                }
                catch (SQLException ignore)
                {
                }
            }
        }
        return (T) affected;
    }
}
